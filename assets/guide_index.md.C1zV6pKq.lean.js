import{_ as t,c as i,a5 as a,o}from"./chunks/framework.CmzXIptl.js";const p=JSON.parse('{"title":"Introduction","description":"","frontmatter":{},"headers":[],"relativePath":"guide/index.md","filePath":"guide/index.md"}'),n={name:"guide/index.md"};function s(r,e,l,h,d,c){return o(),i("div",null,e[0]||(e[0]=[a('<h1 id="introduction" tabindex="-1">Introduction <a class="header-anchor" href="#introduction" aria-label="Permalink to &quot;Introduction&quot;">â€‹</a></h1><p>ðŸ‘‹ Hello World!</p><p>You&#39;re reading the official documentation for <a href="https://github.com/henryhale/mathflow" target="_blank" rel="noreferrer">MathFlow</a>.</p><h2 id="what-is-mathflow" tabindex="-1">What is MathFlow? <a class="header-anchor" href="#what-is-mathflow" aria-label="Permalink to &quot;What is MathFlow?&quot;">â€‹</a></h2><p><strong>MathFlow</strong> is a lightweight and expressive scripting language designed for mathematical expressions and calculations. It provides a simple and intuitive syntax for performing mathematical operations, including support for standard arithmetic, functions like sin, cos, tan, and other functions.</p><h2 id="what-mathflow-is-not" tabindex="-1">What MathFlow is not? <a class="header-anchor" href="#what-mathflow-is-not" aria-label="Permalink to &quot;What MathFlow is not?&quot;">â€‹</a></h2><div class="warning custom-block"><p class="custom-block-title">WARNING</p><ul><li>MathFlow is not a fully-fledged scripting language. This means that it can not be used to build applications by itself.</li></ul></div><h2 id="main-objectives" tabindex="-1">Main Objectives <a class="header-anchor" href="#main-objectives" aria-label="Permalink to &quot;Main Objectives&quot;">â€‹</a></h2><p>The main goals of this project include <em>expressiveness, focus, and simplicity</em>. This implies that the development of this project tends in the direction of providing a better and mathematics-centric usecase.</p><h2 id="how-it-works" tabindex="-1">How it Works <a class="header-anchor" href="#how-it-works" aria-label="Permalink to &quot;How it Works&quot;">â€‹</a></h2><p>This section describes how MathFlow is able to work.</p><p>This library <a href="./../api/">API</a> exposes the <code>evaluate</code> function that takes the MathFlow code and returns a result. Below are the stages the source code undergoes to produce the result;</p><ul><li>A global scope that holds all variables is created</li><li>The source code is then split into individual statements. This process involves; <ul><li>Trimming whitespaces</li><li>Expanding composite terms like <code>2x</code> into <code>2*x</code></li><li>Varible declarations are extracted, their assigned value or expression executed and stored in the global scope variables dictionary</li><li>Empty lines or statements are ignored</li></ul></li><li>Every statement in the generated list of statements is executed independently. This stage involves the followings; <ul><li>The statement is tokenized to generate a list of identified tokens</li><li>The tokens are then parsed into an Abstract Syntax Tree (AST) basing on the order of operations and precedence of the operators used.</li><li>The tree is then interpreted by running through the every node identifying the node type and applying the corresponding operation or computation.</li><li>The output of the interpreter is a numerical value.</li></ul></li><li>The resultant value of the last statement is returned with the final state of the global scope.</li></ul>',13)]))}const m=t(n,[["render",s]]);export{p as __pageData,m as default};
