import{_ as t,c as a,a5 as r,o as i}from"./chunks/framework.CmzXIptl.js";const c=JSON.parse('{"title":"History","description":"","frontmatter":{},"headers":[],"relativePath":"about/history.md","filePath":"about/history.md"}'),o={name:"about/history.md"};function n(s,e,l,h,m,p){return i(),a("div",null,e[0]||(e[0]=[r('<h1 id="history" tabindex="-1">History <a class="header-anchor" href="#history" aria-label="Permalink to &quot;History&quot;">â€‹</a></h1><p>The story behind the development of this project.</p><h2 id="story" tabindex="-1">Story <a class="header-anchor" href="#story" aria-label="Permalink to &quot;Story&quot;">â€‹</a></h2><p>Earlier on, I had released <a href="https://github.com/henryhale/viteshell" target="_blank" rel="noreferrer">viteshell v0.6.0</a>. It is a minimal bash-like shell implementation written in TypeScript. During it&#39;s development, I learnt how to build a small custom parser for parsing user input into an abstract syntax tree that eventually made the implementation possible.</p><p>On the morning of <em>30th December 2023</em>, I was browsing the internet when I landed on an awesome <a href="https://www.youtube.com/watch?v=8VB5TY1sIRo" target="_blank" rel="noreferrer">youtube video</a> describing how to create a programming language from scratch using TypeScript. Watching this youtube video inspired me into thinking, <em>&quot;What if I created an simple custom scripting language that would solve Mathematics problems?&quot;</em></p><p>My initial idea of this language was that plain and simple. On <em>4th January 2024</em>, I made the first working version from which I continued to fix several logical bugs as well as adding several features like builtin functions.</p><p><em>5th January 2024</em> was launch day ðŸŽ‰</p>',7)]))}const d=t(o,[["render",n]]);export{c as __pageData,d as default};
